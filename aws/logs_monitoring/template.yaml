AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Pushes logs, metrics and traces from AWS to Datadog.
Mappings:
  Constants:
    DdForwarder:
      Version: 3.0.6
Parameters:
  DdApiKey:
    Type: String
    NoEcho: true
    Default: ''
    Description: The Datadog API key, which can be found from the APIs page (/account/settings#api). It will be stored in AWS Secrets Manager securely.
  DdSite:
    Type: String
    Default: datadoghq.com
    AllowedValues:
      - datadoghq.com
      - datadoghq.eu
    Description: Define your Datadog Site to send data to -- select datadoghq.com for the Datadog US site or datadoghq.eu for the Datadog EU site.
  FunctionName:
    Type: String
    Default: DatadogForwarder
    Description: The Datadog Forwarder Lambda function name. DO NOT change when updating an existing CloudFormation stack, otherwise the current forwarder function will be replaced and all the triggers will be lost.
  MemorySize:
    Type: Number
    Default: 1024
    Description: Memory size for the Datadog Forwarder Lambda function
  Timeout:
    Type: Number
    Default: 120
    Description: Timeout for the Datadog Forwarder Lambda function
  ReservedConcurrency:
    Type: Number
    Default: 100
    Description: Reserved concurrency for the Datadog Forwarder Lambda function
  LogRetentionInDays:
    Type: Number
    Default: 90
    Description: CloudWatch log retention for logs generated by the Datadog Forwarder Lambda function
  SourceZipUrl:
    Type: String
    Default: ''
    Description: DO NOT CHANGE unless you know what you are doing. Override the default location of the function source code.
  DdTags:
    Type: String
    Default: ''
    Description: Add custom tags to forwarded logs, comma-delimited string, no trailing comma, e.g., env:prod,stack:classic
  DdFetchLambdaTags:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Let the forwarder fetch Lambda tags using GetResources API calls and apply them to the aws.lambda.enhanced.* metrics parsed from the REPORT log. If set to true, permission tag:GetResources will be automatically added to the Lambda execution IAM role. The tags are cached in memory so that they'll only be fetched when the function cold starts or when the TTL (1 hour) expires. The forwarder increments the aws.lambda.enhanced.get_resources_api_calls metric for each API call made.
  DdUseTcp:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: By default, the forwarder sends logs using HTTPS through the port 443. To send logs over a SSL encrypted TCP, set this parameter to true.
  DdNoSsl:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Disable SSL when forwarding logs, set to true when forwarding logs through a proxy.
  DdUrl:
    Type: String
    Default: ''
    Description: The endpoint URL to forward the logs to, useful for forwarding logs through a proxy
  DdPort:
    Type: String
    Default: ''
    Description: The endpoint port to forward the logs to, useful for forwarding logs through a proxy
  DdSkipSslValidation:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Send logs over HTTPS, while NOT validating the certificate provided by the endpoint. This will still encrypt the traffic between the forwarder and the log intake endpoint, but will not verify if the destination SSL certificate is valid.
  RedactIp:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Replace text matching \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} with xxx.xxx.xxx.xxx
  RedactEmail:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Replace text matching [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+ with xxxxx@xxxxx.com
  DdScrubbingRule:
    Type: String
    Default: ''
    Description: Replace text matching the supplied regular expression with xxxxx (default) or DdScrubbingRuleReplacement (if supplied). Log scrubbing rule is applied to the full JSON-formatted log, including any metadata that is automatically added by the Lambda function. Each instance of a pattern match is replaced until no more matches are found in each log.
  DdScrubbingRuleReplacement:
    Type: String
    Default: ''
    Description: Replace text matching DdScrubbingRule with the supplied text
  ExcludeAtMatch:
    Type: String
    Default: ''
    Description: DO NOT send logs matching the supplied regular expression. If a log matches both the ExcludeAtMatch and IncludeAtMatch, it is excluded. Filtering rules are applied to the full JSON-formatted log, including any metadata that is automatically added by the function.
  IncludeAtMatch:
    Type: String
    Default: ''
    Description: Only send logs matching the supplied regular expression and not excluded by ExcludeAtMatch.
  DdMultilineLogRegexPattern:
    Type: String
    Default: ''
    Description: Use the supplied regular expression to detect for a new log line for multiline logs from S3, e.g., use expression "\d{2}\/\d{2}\/\d{4}" for multiline logs beginning with pattern "11/10/2014".
  DdForwardLog:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Set to false to disable log forwarding, while keep the forwarder forward other observability data, such as metrics and traces from Lambda functions.
  DdUseCompression:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Set to false to disable log compression. Only valid when sending logs over HTTP.
  DdCompressionLevel:
    Type: Number
    Default: 6
    AllowedValues: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    Description: Set the compression level from 0 (no compression) to 9 (best compression).
Conditions:
  SetFunctionName:
    Fn::Not:
      - Fn::Equals:
        - Ref: FunctionName
        - 'DatadogForwarder'
  SetSourceZipUrl:
    Fn::Not:
      - Fn::Equals:
        - Ref: SourceZipUrl
        - ''
  SetDdTags:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdTags
        - ''
  SetDdUseTcp:
    Fn::Equals:
      - Ref: DdUseTcp
      - true
  SetDdNoSsl:
    Fn::Equals:
      - Ref: DdNoSsl
      - true
  SetDdUrl:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdUrl
        - ''
  SetDdPort:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdPort
        - ''
  SetRedactIp:
    Fn::Equals:
      - Ref: RedactIp
      - true
  SetRedactEmail:
    Fn::Equals:
      - Ref: RedactEmail
      - true
  SetDdScrubbingRule:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdScrubbingRule
        - ''
  SetDdScrubbingRuleReplacement:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdScrubbingRuleReplacement
        - ''
  SetExcludeAtMatch:
    Fn::Not:
      - Fn::Equals:
        - Ref: ExcludeAtMatch
        - ''
  SetIncludeAtMatch:
    Fn::Not:
      - Fn::Equals:
        - Ref: IncludeAtMatch
        - ''
  SetDdMultilineLogRegexPattern:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdMultilineLogRegexPattern
        - ''
  SetDdSkipSslValidation:
    Fn::Equals:
      - Ref: DdSkipSslValidation
      - true
  SetDdFetchLambdaTags:
    Fn::Equals:
      - Ref: DdFetchLambdaTags
      - true
  SetDdForwardLog:
    Fn::Equals:
      - Ref: DdForwardLog
      - false
  SetDdUseCompression:
    Fn::Equals:
      - Ref: DdUseCompression
      - false
  SetDdCompressionLevel:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdCompressionLevel
        - 6
Resources:
  Forwarder:
    Type: AWS::Serverless::Function
    DependsOn: ForwarderZip
    Properties:
      FunctionName:
        Fn::If:
          - SetFunctionName
          - Ref: FunctionName
          - Ref: AWS::NoValue
      Description: Pushes logs, metrics and traces from AWS to Datadog.
      Handler: lambda_function.lambda_handler
      MemorySize:
        Ref: MemorySize
      Runtime: python3.7
      Timeout:
        Ref: Timeout
      CodeUri:
        Bucket: !Ref ForwarderZipsBucket
        Key:
          Fn::Sub:
            - 'aws-dd-forwarder-${DdForwarderVersion}.zip'
            - { DdForwarderVersion: !FindInMap [Constants, DdForwarder, Version] }
      Layers:
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python37:11
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Trace-Forwarder-Python37:3
      Tags:
        dd_forwarder_version: !FindInMap [Constants, DdForwarder, Version]
      Environment:
        Variables:
          DD_API_KEY_SECRET_ARN:
            Ref: DdApiKeySecret
          DD_SITE:
            Ref: DdSite
          DD_TAGS:
            Fn::If:
              - SetDdTags
              - Ref: DdTags
              - Ref: AWS::NoValue
          DD_FETCH_LAMBDA_TAGS:
            Fn::If:
              - SetDdFetchLambdaTags
              - Ref: DdFetchLambdaTags
              - Ref: AWS::NoValue
          DD_USE_TCP:
            Fn::If:
              - SetDdUseTcp
              - Ref: DdUseTcp
              - Ref: AWS::NoValue
          DD_NO_SSL:
            Fn::If:
              - SetDdNoSsl
              - Ref: DdNoSsl
              - Ref: AWS::NoValue
          DD_URL:
            Fn::If:
              - SetDdUrl
              - Ref: DdUrl
              - Ref: AWS::NoValue
          DD_PORT:
            Fn::If:
              - SetDdPort
              - Ref: DdPort
              - Ref: AWS::NoValue
          REDACT_IP:
            Fn::If:
              - SetRedactIp
              - Ref: RedactIp
              - Ref: AWS::NoValue
          REDACT_EMAIL:
            Fn::If:
              - SetRedactEmail
              - Ref: RedactEmail
              - Ref: AWS::NoValue
          DD_SCRUBBING_RULE:
            Fn::If:
              - SetDdScrubbingRule
              - Ref: DdScrubbingRule
              - Ref: AWS::NoValue
          DD_SCRUBBING_RULE_REPLACEMENT:
            Fn::If:
              - SetDdScrubbingRuleReplacement
              - Ref: DdScrubbingRuleReplacement
              - Ref: AWS::NoValue
          EXCLUDE_AT_MATCH:
            Fn::If:
              - SetExcludeAtMatch
              - Ref: ExcludeAtMatch
              - Ref: AWS::NoValue
          INCLUDE_AT_MATCH:
            Fn::If:
              - SetIncludeAtMatch
              - Ref: IncludeAtMatch
              - Ref: AWS::NoValue
          DD_MULTILINE_LOG_REGEX_PATTERN:
            Fn::If:
              - SetDdMultilineLogRegexPattern
              - Ref: DdMultilineLogRegexPattern
              - Ref: AWS::NoValue
          DD_SKIP_SSL_VALIDATION:
            Fn::If:
              - SetDdSkipSslValidation
              - Ref: DdSkipSslValidation
              - Ref: AWS::NoValue
          DD_FORWARD_LOG:
            Fn::If:
              - SetDdForwardLog
              - Ref: DdForwardLog
              - Ref: AWS::NoValue
          DD_USE_COMPRESSION:
            Fn::If:
              - SetDdUseCompression
              - Ref: DdUseCompression
              - Ref: AWS::NoValue
          DD_COMPRESSION_LEVEL:
            Fn::If:
              - SetDdCompressionLevel
              - Ref: DdCompressionLevel
              - Ref: AWS::NoValue
      ReservedConcurrentExecutions:
        Ref: ReservedConcurrency
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: 'arn:aws:s3:::*'
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            Ref: DdApiKeySecret
        - !If
          - SetDdFetchLambdaTags
          -
            Effect: Allow
            Action:
              - tag:GetResources
            Resource: '*'
          - Ref: AWS::NoValue
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Forwarder}
      RetentionInDays:
        Ref: LogRetentionInDays
  DdApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Datadog API Key
      SecretString:
        Ref: DdApiKey
  ForwarderZipsBucket:
    Type: AWS::S3::Bucket
  ForwarderZip:
    Type: Custom::ForwarderZip
    Properties:
      ServiceToken: !GetAtt 'ForwarderZipCopier.Arn'
      DestZipsBucket: !Ref 'ForwarderZipsBucket'
      SourceZipUrl:
        Fn::If:
          - SetSourceZipUrl
          - !Ref SourceZipUrl
          - Fn::Sub:
            - 'https://github.com/DataDog/datadog-serverless-functions/releases/download/aws-dd-forwarder-${DdForwarderVersion}/aws-dd-forwarder-${DdForwarderVersion}.zip'
            - { DdForwarderVersion: !FindInMap [Constants, DdForwarder, Version] }
  ForwarderZipCopier:
    Type: AWS::Serverless::Function
    Properties:
      Description: Copies Datadog Forwarder zip to the destination S3 bucket
      Handler: index.handler
      Runtime: python3.7
      Timeout: 300
      InlineCode: |
          import json
          import logging
          import threading
          import boto3
          import urllib.request
          def send_cfn_resp(event, context, response_status):
              resp_body = json.dumps({
                  'Status': response_status,
                  'Reason': f'See reasons in CloudWatch Logs - group: {context.log_group_name}, stream:{context.log_stream_name}',
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {}
              }).encode('utf-8')
              req = urllib.request.Request(url=event['ResponseURL'], data=resp_body, method='PUT')
              with urllib.request.urlopen(req) as f:
                  logging.info(f'Sent response to CloudFormation: {f.status}, {f.reason}')
          def delete_zips(bucket):
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(bucket)
              bucket.objects.all().delete()
          def copy_zip(source_zip_url, dest_zips_bucket):
              s3 = boto3.client('s3')
              filename = source_zip_url.split('/')[-1]
              with urllib.request.urlopen(source_zip_url) as data:
                  s3.upload_fileobj(data, dest_zips_bucket, filename)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              send_cfn_resp(event, context, 'FAILED')
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              logging.info(f'Received event: {json.dumps(event)}')
              try:
                  source_zip_url = event['ResourceProperties']['SourceZipUrl']
                  dest_zips_bucket = event['ResourceProperties']['DestZipsBucket']
                  if event['RequestType'] == 'Delete':
                      delete_zips(dest_zips_bucket)
                  else:
                      copy_zip(source_zip_url, dest_zips_bucket)
              except Exception as e:
                  logging.exception(f'Exception when copying zip from {source_zip_url} to {dest_zips_bucket}')
                  send_cfn_resp(event, context, 'FAILED')
              else:
                  send_cfn_resp(event, context, 'SUCCESS')
              finally:
                  timer.cancel()
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - Fn::Join:
                - '/'
                - - Fn::GetAtt: 'ForwarderZipsBucket.Arn'
                  - '*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - Fn::GetAtt: 'ForwarderZipsBucket.Arn'
Outputs:
  DatadogForwarderArn:
    Description: Datadog Forwarder Lambda Function ARN
    Value:
      Fn::GetAtt:
      - Forwarder
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ForwarderArn
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Required
      Parameters:
        - DdApiKey
        - DdSite
    - Label:
        default: Lambda Function (Optional)
      Parameters:
        - FunctionName
        - MemorySize
        - Timeout
        - ReservedConcurrency
        - LogRetentionInDays
    - Label:
        default: Log Forwarding (Optional)
      Parameters:
        - DdTags
        - DdMultilineLogRegexPattern
        - DdUseTcp
        - DdNoSsl
        - DdUrl
        - DdPort
        - DdSkipSslValidation
        - DdUseCompression
        - DdCompressionLevel
        - DdForwardLog
    - Label:
        default: Log Scrubbing (Optional)
      Parameters:
        - RedactIp
        - RedactEmail
        - DdScrubbingRule
        - DdScrubbingRuleReplacement
    - Label:
        default: Log Filtering (Optional)
      Parameters:
        - ExcludeAtMatch
        - IncludeAtMatch
    - Label:
        default: Experimental (Optional)
      Parameters:
        - DdFetchLambdaTags
    - Label:
        default: Advanced (Optional)
      Parameters:
        - SourceZipUrl